Time complexity :
Time complexity is a concept that deals with the quantification of the amount of time taken by a set of code or algorithm
to process or run as a function of the amount of input.
In other words, time complexity is how long a program function takes to process a given input.
The main idea of asymptotic analysis is to have a measure of efficiency of algorithms that doesn’t depend on machine specific constants,
and doesn’t require algorithms to be implemented and time taken by programs to be compared. 
Asymptotic notations are mathematical tools to represent time complexity of algorithms for asymptotic analysis.

Big Oh Notation, Ο
The notation Ο(n) is the formal way to express the upper bound of an algorithm's running time. 
It measures the worst case time complexity or the longest amount of time an algorithm can possibly take to complete.

Omega Notation, Ω
The notation Ω(n) is the formal way to express the lower bound of an algorithm's running time. 
It measures the best case time complexity or the best amount of time an algorithm can possibly take to complete.

Theta Notation, θ
The notation θ(n) is the formal way to express both the lower bound and the upper bound of an algorithm's running time.
It measures the Average case time complexity 

Space Complexity:      
Space Complexity of an algorithm is total space taken by the algorithm with respect to the input size. Space complexity includes
both Auxiliary space and space used by input.
Auxiliary Space is the extra space or temporary space used by an algorithm

